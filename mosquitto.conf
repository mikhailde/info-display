# Config file for mosquitto
#

# =================================================================
# General configuration
# =================================================================

# -----------------------------------------------------------------
# Default listener
# -----------------------------------------------------------------

# Port to use for the default listener.
port 1883

# -----------------------------------------------------------------
# Persistence
# -----------------------------------------------------------------

# If true, connection, subscription and message data will be written to the
# disk in mosquitto.db at the location dictated by persistence_location.
# When mosquitto is restarted, it will reload the data from the file.
# The data will be written to disk when mosquitto closes and also at
# periodic intervals as defined by autosave_interval. Writing of the
# persistence database can be forced by sending the mosquitto process a
# SIGUSR1 signal.
# If false, the data will be stored in memory only.
# Defaults to false.
persistence true

# The filename to use for the persistent database. If not given, defaults to
# mosquitto.db.
# Note that if you have configured a persistent database in another file using
# the same database file, then you must continue to use that file.
#persistence_file mosquitto.db

# The path in which to persist the database file. Used in conjunction with
# persistence. If not set, the current working directory is used.
persistence_location /mosquitto/data/

# =================================================================
# Logging
# =================================================================

# Syslog logging options.
# Note that these options may not be useful if the broker is running as a
# service on a system using systemd, because it will capture stdout/stderr
# itself.
# To disable logging to the system log, use 'log_dest none'
#
# Use 'log_dest none' if you want to prevent the broker from writing any
# messages to the log, although very few messages are generated by the
# broker itself.
#
# log_dest syslog

# File logging options. Use 'stdout' or 'stderr' to log to the console on
# systems that do not have a system logger, or where you do not want to use
# the system logger.
#
# Use 'log_dest none' if you want to prevent the broker from writing any
# messages to the log, although very few messages are generated by the
# broker itself.
#
# log_dest file /mosquitto/log/mosquitto.log
log_dest stdout
log_dest stderr
log_dest topic

# -----------------------------------------------------------------
# Security
# -----------------------------------------------------------------

# By default, Mosquitto will operate as a completely open server with no access
# control applied other than that provided by any listeners. This means that
# any client can connect, publish and subscribe to any topic as long as they
# provide a client id.
# Do not use this mode on a production system or any other system where
# uncontrolled access would be a security risk. See the Security section of
# the Mosquitto manual for more information.
#
# To enable security measures, you must choose and configure appropriate
# plugin(s) using the plugin option.
#
# Authentication plugins may be configured as "modules", where a single
# plugin is configured, or as a "stack" where multiple plugins are loaded,
# processed in order, and may be used to combine authentication and access
# control from multiple sources.
#
# To create an authentication stack, use the auth_plugin_module option and
# provide the name of the plugin module.
#
# If more than one plugin is being used (i.e. if auth_plugin is used more than
# once), the default behaviour is for authentication to succeed if the first
# auth_plugin to load returns MOSQ_ERR_SUCCESS. This makes it simple to allow
# authentication against multiple sources. If you wish to force a client to
# authenticate against all auth_plugins, set use_identity_as_username to true
# and set all auth_plugins to return MOSQ_ERR_PLUGIN_DEFER.
#
# Note that a client may still connect even if it fails authentication,
# providing that it provides a client id. This allows a plugin to perform
# supplementary processing. If you want to prevent clients from connecting if
# they fail authentication, set allow_anonymous to false.
#
# If a plugin sets a username for a client, either through use_identity_as_username
# or directly, this will be used for access control checks if an ACL file is
# configured.
#
# The order in which authentication and access control is carried out is:
# - Client connects
# - Client provides a client id, if no client id is provided then they are
#   disconnected
# - If allow_anonymous is false and no username is provided, then the client
#   is disconnected
# - Authentication is carried out by plugins
# - If a username is set by a plugin, it is used for the remaining steps
# - Username/client id is checked against the ACL file, if any
# - Username/client id is checked against any ACL patterns
# - If no ACLs match, the default ACL is applied
#
# See also the `allow_anonymous`, `password_file`, `acl_file` and `psk_file`
# options.

# If this option is set, the client id will be used as the username for
# authentication and access control purposes. This makes it possible to use
# ACLs and other security features when clients do not send a username.
# Setting this option to true has the same effect as setting
# use_identity_as_username to true for each loaded plugin.
#
# This option is only used when authentication plugins are enabled, and is
# typically used in combination with the auth_opt_clientid option.
#
# Defaults to false.
#use_identity_as_username true

# When a username is not available, either because the client did not send one
# or because use_identity_as_username is set, this option allows anonymous
# users to connect. If false, then a client must provide a username in order
# to connect.
# If true and no other security options are configured, then no authentication
# is performed.
# Defaults to true.
allow_anonymous true
